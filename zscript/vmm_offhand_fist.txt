
/*
*
* Universal off-hand fist script written by Ermac
* https://github.com/iAmErmac
*
*
* You may use this in your project. Just leave this comment
* at the top of this script and give credit please
*
*/

class OffhandFistHandler : EventHandler
{
	//Initialize default values
	private void InitEvent(PlayerInfo player)
	{
		_settings = vmm_Settings.of();
		_isInitialized = true;
	}
	
	//Update model based on cvar change
	private void UpdateFist(PlayerInfo player)
	{
		if(!_settings.offhandFistEnabled())
		{
			player.mo.takeInventory("Offhand_Fist", 1);
			return;
		}
		
		if(!player.mo.CountInv("Offhand_Fist")) player.mo.setinventory("Offhand_Fist", 1, false); //Give player off-hand fist weapon
		
		let player_offhand_fist = player.mo.findinventory("Offhand_Fist");
		if(player_offhand_fist)
		{
			Offhand_Fist(player_offhand_fist).fist_model = _settings.offhandFistModel();
			Offhand_Fist(player_offhand_fist).punch_activate = _settings.punchActivate();
		}
	}
	
	override void WorldTick()
	{
		if (_isTitlemap) { return; } //we dont need to initiate the mod if it's a titlemap
		
		PlayerInfo player = players[consolePlayer];
		if (player == null) { return; }
		
		if (!_isInitialized) { initEvent(player); }
		
		UpdateFist(player);
	}
	
	override void OnRegister()
	{
		_isInitialized = false;
	}

	override void WorldLoaded(WorldEvent event)
	{
		_isTitlemap = CheckTitlemap();
	}

	private static bool CheckTitlemap()
	{
		bool isTitlemap = (level.mapname == "TITLEMAP");
		return isTitlemap;
	}
	
	private bool _isTitlemap;
	private bool _isInitialized;
	private vmm_Settings _settings;
}

class Offhand_Fist : Weapon
{
	override void tick()
	{
		if(!owner || owner.health <= 0)
		{
			self.destroy();
			return;
		}
		
		//Equip the fist only when there is no weapon at offhand
		if(owner.player.OffhandWeapon == null) owner.player.PendingWeapon = self;
		
		hyperv = owner.player.mo.findinventory("V_Moves");
		if(hyperv && V_Moves(hyperv).vr_touch_pose)
			touch_pose = true;
		else
			touch_pose = false;
	}
	
	Default
	{
	Weapon.SelectionOrder 9898;
	Obituary "$OB_MPFIST";
	Tag "$TAG_FIST";
	+WEAPON.WIMPY_WEAPON;
	+WEAPON.MELEEWEAPON;
	+WEAPON.OFFHANDWEAPON;
	+WEAPON.NOHANDSWITCH;
	+WEAPON.CHEATNOTWEAPON;
	+INVENTORY.UNDROPPABLE;
	+INVENTORY.UNTOSSABLE;
	+INVENTORY.UNCLEARABLE;
	}
	
	States
    {
	Ready:
		TNT1 A 0
		{
			//Select fist model based on cvar
			if(invoker.fist_model == 1) return ResolveState("VoxelFist");
			if(invoker.fist_model == 2) return ResolveState("VoxelFist2");
			if((invoker.owner.player.cmd.buttons & BT_USE) || invoker.touch_pose) return ResolveState("ReadyGrab");
			return ResolveState(null);
		}
		PUNG A 1 A_WeaponReady;
		Loop;
	ReadyGrab:
		PUNG E 1 A_WeaponReady;
		Goto Ready;
	Deselect:
		#### A 1 A_Lower;
		Loop;
	Select:
		#### A 1 A_Raise;
		Loop;
	Fire:
		#### B 4;
		#### B 0 A_JumpIfInventory("PowerStrength", 1, "Berserked");
	Normal:
		#### C 4 A_CustomPunchLine(2 * random(1, 10), TRUE, 0, "BulletPuff");
		Goto FireEnd;
	Berserked:
		#### C 4 A_CustomPunchLine(20 * random(1, 10), TRUE, 0, "BulletPuff");
	FireEnd:
		#### D 5;
		#### C 4;
		#### B 5 A_ReFire;
		Goto Ready;
	VoxelFist:
		FIST A 1 A_WeaponReady;
		Goto Ready;
	VoxelFist2:
		FST2 A 1 A_WeaponReady;
		Goto Ready;
	}
	
	action void A_CustomPunchLine (int damage, bool norandom = false, int flags = CPF_USEAMMO, class<Actor> pufftype = "BulletPuff", double range = 0, double lifesteal = 0, int lifestealmax = 0, class<BasicArmorBonus> armorbonustype = "ArmorBonus", sound MeleeSound = 0, sound MissSound = "")
	{
		if (range == 0)
			range = DEFMELEERANGE;
		
		if(invoker.punch_activate)
		{
			FLineTraceData l;
			double z = player.mo.OffhandPos.z - FloorZ; //height * 0.5 - floorclip + player.mo.AttackZOffset*player.crouchFactor;
			double angleP = player.mo.OffhandAngle + 90.0;
			double pitchP = player.mo.OffhandPitch;
			LineTrace(angleP, range, pitchP, TRF_BLOCKUSE, offsetz: z, data: l);
			let lline = l.HitLine;
			if (lline)
			{
				lline.Activate(self, l.LineSide, SPAC_Use);
			}
		}
		
		A_CustomPunch(damage, norandom, flags, pufftype, range, lifesteal, lifestealmax, armorbonustype, meleesound, misssound);
	}
	
	int fist_model; //set by cvar
	bool punch_activate; //set by cvar
	private inventory hyperv;
	private bool touch_pose;
}