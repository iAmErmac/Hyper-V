
/*
*
* Dash script credits to Apeirogon
* https://forum.zdoom.org/viewtopic.php?p=1059177#p1059177
*
* Ledge grab script credits to dodopod
* https://forum.zdoom.org/viewtopic.php?f=105&t=59085
*
* Grappling/Meat-Hook script credits to Agent_Ash aka Jekyll Grim Payne
* https://github.com/jekyllgrim/Grappling-Hook
*
* Double Jump, Teleport Move and Positional Melee script credits to Ermac
* Everything is combined, modified and extended by Ermac
* https://github.com/iAmErmac
*
*
* You may use this in your project. Just leave this comment
* at the top of this script and give credit please
*
*/

class VMovesHandler : EventHandler
{	
	//Initialize default values
	private void initEvent()
	{
		PlayerInfo player = players[consolePlayer];
		if (player == null) { return; }
		
		_settings = vmm_Settings.of();
		
		player.mo.setinventory("V_Moves", 1, false); //Give player virtual item which grants all the abilities
		
		hyperv = player.mo.findinventory("V_Moves");
		
		UpdateVMoves(hyperv);
		
		//Reset some values to defaults
		V_Moves(hyperv).dash_cooldown = 0;
		V_Moves(hyperv).dash_buttons_press = 0;
		V_Moves(hyperv).jump_buttons_press = 0;
		V_Moves(hyperv).MaxLedgeHeight = 48;
		V_Moves(hyperv).ClimbSpeed = 2;
		
		_isInitialized = true;
	}
	
	//Load up the cvar values
	private void UpdateVMoves(Actor hyperv)
	{
		if(_settings.doubleDashEnabled() == true)
		{
			V_Moves(hyperv).max_dash_buttons_press = 2;
			max_dash_num = 2;
		}
		else
		{
			V_Moves(hyperv).max_dash_buttons_press = 1; //don't allow double dash
			max_dash_num = 1;
		}
		
		_settings = vmm_Settings.of();
		PlayerInfo player = players[consolePlayer];
		
		V_Moves(hyperv).dash_multiplier 	= 30 * _settings.dashMultiplier();
		V_Moves(hyperv).dash_move_cooldown 	= Ceil(35 * _settings.dashCooldown());
		V_Moves(hyperv).double_jumping 		= _settings.doubleJumpEnabled();
		V_Moves(hyperv).ledge_climbing 		= _settings.ledgeClimbEnabled();
		V_Moves(hyperv).vr_melee 			= _settings.vrMeleeEnabled();
		V_Moves(hyperv).vr_melee_disabled	= _settings.hyperVMeleeDisabled(); //this one loaded from external cvar
		V_Moves(hyperv).vr_melee_range 		= _settings.vrMeleeRange();
		V_Moves(hyperv).vr_melee_mult 		= _settings.vrMeleeMult();
		V_Moves(hyperv).vr_melee_combo 		= _settings.vrMeleeCombo();
		V_Moves(hyperv).vr_melee_combohits 	= _settings.vrMeleeComboHit();
		V_Moves(hyperv).vr_melee_combocrit 	= _settings.vrMeleeComboCrit();
		V_Moves(hyperv).vr_melee_knockback 	= _settings.vrMeleeKnockback();
		V_Moves(hyperv).vr_melee_kb_mass 	= _settings.vrMeleeKnockbackMass();
		V_Moves(hyperv).vr_meleecombostun 	= _settings.vrMeleeComboStun();
		V_Moves(hyperv).hook_coldown		= _settings.ghookCooldown();
		V_Moves(hyperv).teleport_restricted	= _settings.teleportRestricted();
	}
	
	override void OnRegister()
	{
		_isInitialized = false;
	}

	override void WorldLoaded(WorldEvent event)
	{
		_isTitlemap = CheckTitlemap();
	}
	
	//Action response to keybinds
    override void NetworkProcess(ConsoleEvent e)
    {
        let plr = players[e.Player].mo;
		if(!plr) return;
		
		if(!hyperv) return;
		
		//Detect Dash key press
        if (e.Name == "vmm_dash")
        {
			V_Moves(hyperv).forward_thrust = true;
			countdown_for_dash_stop = 1; //disable dash flag shortly, otherwise player will keep dashing infinitely
			
			if(V_Moves(hyperv).dash_buttons_press < max_dash_num)
			{
				V_Moves(hyperv).dash_buttons_press++;
			}
			else
			{
				V_Moves(hyperv).dash_buttons_press = max_dash_num;
			}
        }
		
		//Detect jump key press
		if (e.Name == "vmm_jump")   
		{
			V_Moves(hyperv).jump_thrust = true;
			V_Moves(hyperv).jump_buttons_press++;
			countdown_for_djump_stop = 35;
		}
		
		//Detect grapple hook key press
		if (e.Name == "vmm_throwhook")   
		{
			V_Moves(hyperv).Activate_Hook();
		}
		
		//Detect teleport key press
		//Hold to activate the teleport beam
		//Release the key to teleport
        if (e.Name == "vmm_teleport")
        {
			if(e.Args[0] && portalbeam_active)
			{
				V_Moves(hyperv).Teleport_Player(plr);
				V_Moves(hyperv).ActivateTeleporBeam = false;
				portalbeam_active = false;
			}
			else
			{
				V_Moves(hyperv).ActivateTeleporBeam = true;
				portalbeam_active = true;
			}
		}
    }
	
	//This is to intercept jump key press and send to our event
	override bool InputProcess (InputEvent e)
	{
		int key1;
		int key2;
		
		if (e.Type == InputEvent.Type_KeyDown && automapactive == false) // not when automap is active
		{
			[key1, key2] = bindings.getKeysForCommand("+jump");
			if(e.keyScan == key1 || e.keyScan == key2)
			{
				SendNetworkEvent("vmm_jump", e.KeyScan);
			}
		}
		
		if (e.Type == InputEvent.Type_KeyUp)
		{
			[key1, key2] = bindings.getKeysForCommand("tpmv");
			if(e.keyScan == key1 || e.keyScan == key2)
			{
				SendNetworkEvent("vmm_teleport", 1);
			}
		}
		 
		return false;
	}
	
	override void WorldTick()
	{
		if (_isTitlemap) { return; } //we dont need to initiate the mod if it's a titlemap

		if (!_isInitialized) { initEvent(); }
		
		//make sure player can't spam dash
		if(countdown_for_dash_stop > 0)
			countdown_for_dash_stop--;
		else
			V_Moves(hyperv).forward_thrust = false;
		
		//make sure player can't spam jumps
		if(countdown_for_djump_stop > 0)
			countdown_for_djump_stop--;
		else
		{
			V_Moves(hyperv).jump_thrust = false;
			V_Moves(hyperv).jump_buttons_press = 0;
		}
		
		//Update all stats realtime as they get changed in menu
		UpdateVMoves(hyperv);
	}

	private static bool CheckTitlemap()
	{
		bool isTitlemap = (level.mapname == "TITLEMAP");
		return isTitlemap;
	}
	
	private bool _isInitialized;
	private bool _isTitlemap;
	private vmm_Settings _settings;
	
	private inventory hyperv;
	private int countdown_for_dash_stop;
	private int countdown_for_djump_stop;
	private int max_dash_num;
	
	bool portalbeam_active;
}

class V_Moves : CustomInventory
{
    property MaxLedgeHeight: maxLedgeHeight;
    property ClimbSpeed: climbSpeed;
	
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.UNCLEARABLE;
		+INVENTORY.PERSISTENTPOWER;
	}

	override void doeffect()
	{
		super.DoEffect();
		if (!owner || !owner.player) return;
		if (owner.health <= 0) return;
	
	//////////////////////////////////////
	// Dash								//
	//////////////////////////////////////
	
		//Actual processing of dash moves
		if(forward_thrust == true && dash_cooldown <= 0)
		{
			if(dash_buttons_press <= max_dash_buttons_press)
			{
				owner.vel = (cos(owner.angle), sin(owner.angle), 5);

				owner.vel.x *= dash_multiplier/3;
				owner.vel.y *= dash_multiplier/3;
				
				owner.vel.z *= 1.2;
				owner.bspectral = true;

				//owner.a_playsound("");
			}
			
			if(dash_buttons_press >= max_dash_buttons_press)
			{
				dash_buttons_press = 0;
				dash_cooldown = dash_move_cooldown;
			}
			else
			{
				dash_cooldown = 2;
			}
		}
		
		if(dash_cooldown > 0)
		{dash_cooldown--;}
		
		if(dash_cooldown <= randompick(6, 7, 8) && owner.bspectral == true)
		{owner.bspectral = false;}
		
	//////////////////////////////////////
	// Double Jump						//
	//////////////////////////////////////
		
		//Actual processing of double jump
		//Double jump should be disabled in water or zero gravity environment
		if(double_jumping && jump_thrust == true && WaterLevel < 2 || !bNOGRAVITY)
		{
			if(jump_buttons_press == 2)
			{
				owner.vel.z = 0; //cancel the actual jump for pressing jump button
				owner.A_ChangeVelocity(0, 0, owner.player.mo.jumpZ);
				jump_thrust = false;
				jump_buttons_press = 0;

				//owner.a_playsound("");
			}
		}
		
		//Actual processing of Ledge grabbing
		if(ledge_climbing)
		{
			AttemptLedgeGrabbing();
		}
		if(hook_busy > 0)
		{
			hook_busy--;
		}
		else
		{
			hookFired = false;
		}
		
		ActivateTeleporter();
		Perform_VR_Melee();
	}
	
	//////////////////////////////////////
	// Ledge Climb						//
	//////////////////////////////////////
	
	private void AttemptLedgeGrabbing()
	{
		if(!owner) return;
		
		double ledgeHeight;
        {
            vector3 oldPos = owner.pos;

            owner.SetXyz(owner.pos + (0, 0, maxLedgeHeight));   // Account for thin 3D floors
            ledgeHeight = owner.GetZAt(owner.radius + climbReach, 0) - oldPos.z;
            owner.SetXyz(oldPos);
        }

        bool jump = owner.player.cmd.buttons & BT_JUMP;
        double clearance = owner.GetZAt(owner.radius + climbReach, 0, 0, GZF_CEILING) - owner.GetZAt(owner.radius + climbReach, 0);

        // Start/stop climbing
        if (!climbing)
        {
            if (jump && ledgeHeight > owner.maxStepHeight && ledgeHeight <= maxLedgeHeight)
            {
                climbing = true;
                //A_PlaySound("*Climb", CHAN_BODY);
            }
        }
        else
        {
            if (!jump || ledgeHeight > maxLedgeHeight)  // Drop down/get knocked down from ledge
            {
                climbing = false;
            }
            else if (ledgeHeight <= owner.maxStepHeight && clearance >= 0.5 * owner.height)    // Reach top of ledge
            {
                climbing = false;

                // Crouch, so player can fit into small spaces
                owner.player.crouchFactor = 0.5;
                owner.SetOrigin(owner.pos + (0, 0, 0.5 * owner.height), false);   // Keep view from jerking
                owner.player.viewHeight *= 0.5;

                owner.VelFromAngle(thrustSpeed, owner.angle);  // Thrust player onto ledge
            }

            if (!climbing)  // Exit climbing state
            {
                owner.player.SetPsprite(PSP_WEAPON, owner.player.readyWeapon.GetUpState());
                owner.player.jumpTics = -1;
            }
        }

        if (climbing)
        {
            // Weapon will reset to Ready state, so we need to set it to Down state every tic
            owner.player.SetPsprite(PSP_WEAPON, owner.player.readyWeapon.GetDownState());

            let psp = owner.player.GetPsprite(PSP_WEAPON);
            if (psp.y == WEAPONTOP) // Keep weapon down
            {
                psp.y = WEAPONBOTTOM;
            }
            else    // Lower weapon twice as fast
            {
                psp.y += 6;
            }

            if (ledgeHeight <= owner.maxStepHeight) // Hold onto ledge at top, if player can't get on it
            {
                owner.vel = (0, 0, 0);
            }
            else    // Climb ledge
            {
                owner.vel = (0, 0, climbSpeed);
            }
        }
	}

	//////////////////////////////////////
	// Grapple Hook						//
	//////////////////////////////////////
	
	void Activate_Hook()
	{
		if (owner.health <= 0) return;
		
		if(!hook_busy && !hookFired)
		{
			owner.A_StartSound("HookLaunch",CHAN_AUTO);
			vector2 ofs = FindHooktargetOfs();
			//hook = HookProjectile(owner.A_SpawnProjectile("HookProjectile",angle:ofs.x,flags:CMF_AIMDIRECTION,pitch:owner.pitch+ofs.y));
			hook = HookProjectile(owner.SpawnPlayerMissile("HookProjectile"));
			
			hookFired = true;
			hook_busy = Ceil(35 * hook_coldown);
		}
	}
	
	vector2 FindHooktargetOfs(int atkdist = 320) {
		vector2 ofs;			
		double closestDist = double.infinity;
		actor hooktarget;
		BlockThingsIterator itr = BlockThingsIterator.Create(owner,atkdist);
		while (itr.next()) {
			let next = itr.thing;
			if (next == owner)
				continue; 
			if (!next.bShootable || !(next.bIsMonster || (next is "PlayerPawn")))
				continue;
			double dist = owner.Distance3D(next);
			if (dist > atkdist)
				continue;
			if (dist < closestDist)
				closestDist = dist;
			if (!owner.CheckSight(next,SF_IGNOREWATERBOUNDARY))
				continue;
			vector3 targetpos = LevelLocals.SphericalCoords((owner.pos.x,owner.pos.y,owner.player.viewz),next.pos+(0,0,next.default.height*0.5),(owner.angle,owner.pitch));	
			if (abs(targetpos.x) > 11 || abs(targetpos.y) > 11) {
				continue;
			}
			ofs = targetpos.xy;
		}
		return ofs;
	}
	
	//////////////////////////////////////
	// Teleport Move					//
	//////////////////////////////////////
	
	private void ActivateTeleporter()
	{
		if(!owner) return;
		
		if(ActivateTeleporBeam)
		{
			let plr = owner.player.mo;
			if(!PortalCircle) PortalCircle = Actor.Spawn("PortalIndicator");
			PortalCircle.bInvisible = true;
			Actor teleport_beam_dummy;
			teleport_beam_dummy = plr.SpawnPlayerMissile("Telebeam_Dummy");
			if(teleport_beam_dummy) teleport_beam_dummy.master = self;
		}
		else
		{
			if(PortalCircle) PortalCircle.destroy();
		}
	}
	
	void Teleport_Player(PlayerPawn plr)
	{
		if(PortalPos.x == 0 && PortalPos.y == 0 && PortalPos.z == 0) return;
	
		plr.TeleportMove(portalpos, false);
	}

	//////////////////////////////////////
	// Positional Melee					//
	//////////////////////////////////////
	
	void Perform_VR_Melee()
	{
		if(!vr_melee || vr_melee_disabled) return;
		
		Double b_angle = owner.angle;
		double pitch = owner.AimTarget() ? owner.BulletSlope(null, ALF_PORTALRESTRICT) : owner.pitch;
		FTranslatedLineTarget t, t2, t3;
		
		int m_damage = (random(1, 10) * vr_melee_mult) << 1;
		if (owner.player.mo.FindInventory("PowerStrength"))
			m_damage *= 10;
		int attack_range = (vr_melee_range + 1) * 32;
		
		int melee_cooldown = 22;
		
		//Main hand melee
		if(!melee_delay)
		{
			//scan for melee target in a cone shaped area
			owner.LineAttack(b_angle, attack_range, pitch, 0, "none", "vmDummyPuff", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ, t);
			owner.LineAttack(b_angle - 30.0, attack_range, pitch, 0, "none", "vmDummyPuff", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ, t2);
			owner.LineAttack(b_angle + 30.0, attack_range, pitch, 0, "none", "vmDummyPuff", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ, t3);
			if(t.linetarget)
			{
				m_damage = CheckMeleeCombo(t.linetarget) ? m_damage * frandom(1.5, 3.0) : m_damage;
				owner.LineAttack(b_angle, attack_range, pitch, m_damage, "Melee", "BulletPuff", LAF_NORANDOMPUFFZ);
				melee_delay = melee_cooldown;
				t.linetarget.A_PlaySound("vrfist/punch", 6);
			}
			else if(t2.linetarget)
			{
				m_damage = CheckMeleeCombo(t2.linetarget) ? m_damage * frandom(1.5, 3.0) : m_damage;
				owner.LineAttack(b_angle - 30.0, attack_range, pitch, m_damage, "Melee", "BulletPuff", LAF_NORANDOMPUFFZ);
				melee_delay = melee_cooldown;
				t2.linetarget.A_PlaySound("vrfist/punch", 6);
			}
			else if(t3.linetarget)
			{
				m_damage = CheckMeleeCombo(t3.linetarget) ? m_damage * frandom(1.5, 3.0) : m_damage;
				owner.LineAttack(b_angle + 30.0, attack_range, pitch, m_damage, "Melee", "BulletPuff", LAF_NORANDOMPUFFZ);
				melee_delay = melee_cooldown;
				t3.linetarget.A_PlaySound("vrfist/punch", 6);
			}
		}
		else if(melee_delay > 0)
		{
			melee_delay--;
		}

	}
	
	private bool CheckMeleeCombo(Actor target)
	{
		if(!vr_melee_combo) return false;
		
		target.GiveInventory("vrMeleeComboMarker", 1);
		int hitcount = target.CountInv("vrMeleeComboMarker");
		bool is_critical_hit = false;
		
		//It's time for combo hit
		if(hitcount >= vr_melee_combohits)
		{
			target.TakeInventory("vrMeleeComboMarker", 10);
			
			//Knock back if possible
			if(vr_melee_knockback && target.mass <=  vr_melee_kb_mass) target.A_Recoil(10 * vr_melee_knockback);
			
			//If it's a critical hit
			if(random(1, 10) <= vr_melee_combocrit)
			{
				is_critical_hit = true;
				target.A_PlaySound("vrfist/strong", 6);
				
				//If has a chance to stun
				if(random(1, 10) <= vr_meleecombostun)
				{
					target.GiveInventory("vrMeleeComboStunner", 1);
					target.A_Quake(random(1,2), 22, 0, 64, "");
					target.A_PlaySound("vrfist/rip", 5);
					target.A_PlaySound("vrfist/beat", 7);
				}
			}
		}
		
		return is_critical_hit;
	}

	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	}
	
	//Dash
	bool forward_thrust; //set by cvar
	int dash_buttons_press;
	int max_dash_buttons_press;
	int dash_move_cooldown; //set by cvar
	double dash_multiplier; //set by cvar
	int dash_cooldown;
	
	//Double Jump
	bool double_jumping; //set by cvar
	bool jump_thrust;
	int jump_buttons_press;
	
	//Ledge Climb
	bool ledge_climbing; //set by cvar
	const climbReach = 64;
    const thrustSpeed = 4;
    bool climbing;
	int maxLedgeHeight;
    int climbSpeed;
	
	//Grappling Hook
	double hook_coldown; //set by cvar
	double hook_busy;
	bool hookFired;
	bool draggingPlayer;
	HookProjectile hook;
	
	//Teleport Move
	bool teleport_restricted; //set by cvar
	bool ActivateTeleporBeam;
	Actor PortalCircle;
	Vector3 PortalPos;
	
	//Positional Melee
	bool vr_melee; //set by cvar
	bool vr_melee_disabled; //set by external cvar
	double vr_melee_range; //set by cvar
	int vr_melee_mult; //set by cvar
	int melee_delay;
	int offhand_melee_delay;
	bool vr_melee_combo;
	int vr_melee_combohits;
	int vr_melee_combocrit;
	float vr_melee_knockback;
	int vr_melee_kb_mass;
	int vr_meleecombostun;
}

Class vrMeleeComboMarker : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNCLEARABLE;
		+INVENTORY.PERSISTENTPOWER;
		inventory.maxamount 10;
	}
}

Class vrMeleeComboStunner : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNCLEARABLE;
		+INVENTORY.PERSISTENTPOWER;
		inventory.maxamount 1;
	}
			
	override void DoEffect()
	{
		super.DoEffect();
		
		if(!is_initialized) InitStunner();
		
		if(GetAge() < stun_duration && owner.health > 0)
		{
			owner.tics = -1;
			owner.bNOPAIN = true;
			if(owner.FindState("Pain"))
				owner.setState(owner.findState("Pain"));
			else
				owner.setState(owner.findState("Spawn"));
		}
		else
		{
			owner.tics = 1;
			owner.bNOPAIN = owner.default.bNOPAIN;
			destroy();
		}
	}
	
	private void InitStunner()
	{
		stun_duration = ceil(frandom(3.0, 5.0) * 35);
		is_initialized = true;
	}
	
	private bool is_initialized;
	private int stun_duration;
}

	//////////////////////////////////////
	// Grappling Hook Actors			//
	//////////////////////////////////////

Class HookProjectile : Actor {

	property maxdistance : maxdistance;
	
	Default
	{
		HookProjectile.maxdistance 720;
		projectile;
		damage 0;
		speed 25;
		+HITTRACER;
		+BLOODLESSIMPACT;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		spawnPos = pos;
	}
	
	override void Tick()
	{
		super.Tick();
		if (isFrozen()) return;
		
		A_SpawnParticle("DB 9D 00", SPF_FULLBRIGHT, 100, 4, 0, 0, 0, 0); //This will draw the rope
		
		if (level.Vec3Diff(pos, spawnPos).length() > maxdistance && !inStateSequence(curstate,FindState("Flyback")))
			SetStateLabel("Flyback");
	}
	
	states
	{
	Spawn:
		HOOK A 1;
		loop;
	Death:
		TNT1 A 0 A_PlaySound("HookWall", 7);
		HOOK B 1
		{
			if (target && target.player)
			{
				/*
				target.GiveInventory("HookControl",1);
				control = HookControl(target.FindInventory("HookControl"));
				control.master = self;
				*/
					
				target.speed = 0;
				target.vel = target.Vec3To(self).Unit() * 25;
				if (Distance3D(target) <= 64)
				{
					target.speed = target.default.speed;					
					destroy();
				}
			}
			
			if(GetAge() > 35*5) destroy(); //Get rid of the hook to prevent player getting stuck
		}
		wait;
	XDeath:
		TNT1 A 0 A_PlaySound("HookMeat", 7);
		HOOK B 1
		{
			if (tracer)
			{
				tracer.GiveInventory("HookControl",1);
				control = HookControl(tracer.FindInventory("HookControl"));
				control.master = self;
			}
		}
		goto Flyback;
	Flyback:
		TNT1 A 0 A_PlaySound("HookFailed", 7);
		HOOK B 1
		{
			if (target)
			{
				flytime++;
				vel = Vec3To(target).Unit() * 30;
				if (Distance3D(target) <= 64 || flytime > 35*5)
				{
					if (tracer)
						tracer.TakeInventory("HookControl",1);						
					destroy();
				}
			}
		}
		wait;
	}
	
	vector3 spawnPos;
	int maxdistance;
	int flytime;
	HookControl control;
}	

Class HookControl : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNCLEARABLE;
		+INVENTORY.PERSISTENTPOWER;
		inventory.maxamount 1;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || !master)
		{
			destroy();
			return;	
		}
		owner.SetOrigin(master.pos-(0,0,owner.default.height*0.5),true);
	}
}

	//////////////////////////////////////
	// Teleport Beam Dummy Actors		//
	//////////////////////////////////////

//Dummy actor to use for teleport beam
class Telebeam_Dummy : Actor
{
	Default
	{
		Damage 0;
		Radius 1;
		Height 1;
		Speed 10;
		Mass 0;
		Gravity 0.4;
		Projectile;
		+Missile;
		+NoBlockMap;
		+DontSplash;
		+CLIENTSIDEONLY;
		+GHOST;
		-NOGRAVITY;
		+THRUGHOST;
		+NOTELEPORT;
	}
	
	States
	{
	Spawn:
		TNT1 A 1 A_SpawnParticle("00 FF FF", SPF_FULLBRIGHT, 1, 5, 0, 0, 0, 0);
		Loop;
	Death:
		TNT1 A 0 
		{
			// checking if there is a hit on the floor
			// if any if these checks fail, destroy the actor by moving
			// to the "Null" state sequence:
			if(invoker.master && V_Moves(invoker.master).teleport_restricted && (GetZAt(24,0) != floorz || GetZAt(-24,0) != floorz || GetZAt(0,24) != floorz || GetZAt(0,-24) != floorz))
			{
				if(V_Moves(invoker.master)) V_Moves(invoker.master).PortalPos = (0, 0, 0);
				return ResolveState("Null");
			}
			
			Actor plr;
			if(invoker.master)
			{
				plr = V_Moves(invoker.master).owner;
				if(V_Moves(invoker.master).teleport_restricted && plr && !plr.CheckSight(invoker, SF_IGNOREVISIBILITY | SF_IGNOREWATERBOUNDARY))
				{
					if(V_Moves(invoker.master)) V_Moves(invoker.master).PortalPos = (0, 0, 0);
					return ResolveState("Null");
				}
			}
			
			if(invoker.master) V_Moves(invoker.master).PortalPos = (0, 0, 0);
			return ResolveState(null);
		}
		TNT1 A 0 A_CheckCeiling("Crash");
		TNT1 A 0 A_CheckFloor("Portal");
		TNT1 A 0 A_MakePortalCircle();
		Stop;
	XDeath:
	Crash:
		TNT1 A 0;
		Stop;
	Portal:
		TNT1 A 1 A_MakePortalCircle();
		Stop;
	}
	
	action void A_MakePortalCircle()
	{
		if(invoker.master && V_Moves(invoker.master).PortalCircle)
		{
			if(V_Moves(invoker.master).teleport_restricted && !V_Moves(invoker.master).owner.CheckMove(self.pos.xy)) return;
		
			V_Moves(invoker.master).PortalPos = self.pos;
			V_Moves(invoker.master).PortalCircle.SetOrigin(self.pos, true);
			V_Moves(invoker.master).PortalCircle.bInvisible = false;
			Actor.Spawn("PortalIndicatorLight", self.pos);
		}
	}
}

//Dummy actor to use for teleport circle
class PortalIndicator : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 0;
		Mass 0;
		Gravity 1;
		+NoBlockMap;
		+DontSplash;
		+CLIENTSIDEONLY;
		+THRUACTORS;
		+GHOST;
		-NOGRAVITY;
		+THRUGHOST;
		+NOTELEPORT;
		RenderStyle "Shaded";
		StencilColor "00 FF FF";
		Alpha 1;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		PRTL A 1 Bright;
		Wait;
	}
}
class PortalIndicatorLight : PortalIndicator
{
	States
	{
	Spawn:
		TNT1 A 2;
		Stop;
	}
}

//Dummy puff used by vr melee
Class vmDummyPuff : BulletPuff
{
	Default
	{
	+NOGRAVITY;
	+DONTSPLASH;
	Renderstyle "None";
	Damage 0;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}